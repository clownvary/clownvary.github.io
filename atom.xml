<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小石头</title>
  <subtitle>漏鱼</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://clownvary.github.io/"/>
  <updated>2017-06-16T06:42:59.000Z</updated>
  <id>http://clownvary.github.io/</id>
  
  <author>
    <name>clownvary</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo文件夹配置</title>
    <link href="http://clownvary.github.io/2016/12/05/hexo%E6%96%87%E4%BB%B6%E5%A4%B9%E9%85%8D%E7%BD%AE/"/>
    <id>http://clownvary.github.io/2016/12/05/hexo文件夹配置/</id>
    <published>2016-12-05T07:46:22.000Z</published>
    <updated>2017-06-16T06:42:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 在写文章时，如果需要引用资源文件比如图片，可以直接使用url也可以使用本地资源，url不用说了，本地资源配置如下：<br><a id="more"></a><br>有两种方法可以访问到本地资源</p>
<p>1.应用级资源文件夹形式</p>
<ul>
<li>在source目录下建立Images文件夹，放入图片</li>
<li>文章中引用<code>![引用图片](/Images/xxx.png)</code></li>
<li>hexo s发布测试，就可以看到，如果直接预览markdown格式不行，必须要本地服务启动测试才行</li>
<li>我来自／source/Images目录<img src="/Images/down.png" alt="img"></li>
</ul>
<p>2.子目录文件夹形式</p>
<ul>
<li>在＿config.yml中修改配置项<code>post_asset_folder: true</code> 开启功能</li>
<li>之后每次hexo new …文章时会同时生成一个同名的文件夹，把该文章的图片放进去</li>
<li>访问格式</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="symbol">%</span> asset_img xxx.jpg This <span class="built_in">is</span> an <span class="built_in">example</span> <span class="built_in">image</span> <span class="symbol">%</span>&#125;</div></pre></td></tr></table></figure>
<p>不能直接用markdown格式引入</p>
<ul>
<li>我来自内部目录<img src="/2016/12/05/hexo文件夹配置/down.png" alt="this is img from folder" title="this is img from folder"></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 在写文章时，如果需要引用资源文件比如图片，可以直接使用url也可以使用本地资源，url不用说了，本地资源配置如下：&lt;br&gt;
    
    </summary>
    
    
      <category term="配置" scheme="http://clownvary.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="hexo" scheme="http://clownvary.github.io/tags/hexo/"/>
    
      <category term="笔记" scheme="http://clownvary.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript新手注意</title>
    <link href="http://clownvary.github.io/2016/12/04/TypeScript%E6%96%B0%E6%89%8B%E6%B3%A8%E6%84%8F/"/>
    <id>http://clownvary.github.io/2016/12/04/TypeScript新手注意/</id>
    <published>2016-12-03T20:36:02.000Z</published>
    <updated>2017-06-16T06:27:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li><code>let x:any</code> <code>let x:object</code>都可以赋值任意类型，不同在于， Object类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法：</li>
<li><code>never</code> 表示那些永远不存在的值得类型<a id="more"></a></li>
<li>类型断言<code>()&lt;string&gt;name)</code>或<code>(name as string)</code></li>
<li>接口类型检查，只要传入的变量包含接口定义的属性就行，另外和属性顺序无关</li>
<li><p>可选属性</p>
  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Pserson</span></span></div><div class="line">&#123;</div><div class="line">name?:string;</div><div class="line"><span class="string">age:</span>number;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>只读属性</p>
</li>
</ul>
<pre><code><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> <span class="title">Point</span> </div><div class="line">&#123;</div><div class="line">   <span class="keyword">readonly</span> x: number;</div><div class="line">   <span class="keyword">readonly</span> y: number;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><ul>
<li><p>接口定义，类实现,注意关键字<code>implements</code></p>
  <figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> ClockInterface <span class="comment">&#123;</span></div><div class="line">   currentTime: Date;</div><div class="line">   setTime(d: Date);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface <span class="comment">&#123;</span></div><div class="line">   currentTime: Date;</div><div class="line">   setTime(d: Date) &#123;</div><div class="line">       this.currentTime = d;</div><div class="line">   &#125;</div><div class="line">   <span class="function"><span class="keyword">constructor</span><span class="params">(h: number, m: number)</span> <span class="comment">&#123; &#125;</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>扩展接口,注意关键字<code>extends</code></p>
  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">interface Shape &#123;</div><div class="line">   color: string;</div><div class="line">&#125;</div><div class="line"><span class="built_in"></span></div><div class="line">interface PenStroke &#123;</div><div class="line">   penWidth: number;</div><div class="line">&#125;</div><div class="line"><span class="built_in"></span></div><div class="line">interface Square extends Shape, PenStroke &#123;</div><div class="line">   sideLength: number;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let square = &lt;Square&gt;&#123;&#125;;</div><div class="line">square.color = <span class="string">"blue"</span>;</div><div class="line">square.sideLength = 10;</div><div class="line">square.penWidth = 5.0;</div></pre></td></tr></table></figure>
</li>
<li><p>限定符，public,private,protected（类，和子类可访问）,readonly</p>
</li>
<li>存取器，get,set,static(属性，方法都可直接添加了不像es6只能方法添加)</li>
<li><p>抽象类和接口对比，两者都是只定义签名不包含实现。<br> 不同在于前者需要abstract关键字修饰，同时抽象<strong><em>类</em></strong>可以包含具体方法或抽象方法，抽象<strong><em>方法</em></strong>必须子类实现，接口不能有实现</p>
 <figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//接口</span></div><div class="line"><span class="keyword">interface</span> <span class="title">Person</span></div><div class="line">&#123;</div><div class="line">  name:<span class="keyword">string</span>;</div><div class="line">  getName();<span class="keyword">string</span>;<span class="comment">//不能用方法体</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>泛型，泛型约束</p>
  <figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">interface Lengthwise &#123;</div><div class="line">   <span class="built_in">length</span>: number;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;<span class="params">(arg: T)</span>: <span class="title">T</span> &#123;</span></div><div class="line">   console.<span class="built_in">log</span>(arg.<span class="built_in">length</span>);  <span class="comment">// Now we know it has a .length property, so no 	more error</span></div><div class="line">   <span class="keyword">return</span> arg;</div><div class="line">&#125;</div><div class="line"><span class="comment">//类似于c#里的where T :base</span></div></pre></td></tr></table></figure>
</li>
<li><p>联合类型</p>
  <figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function">function <span class="title">test</span>(<span class="params">name:<span class="keyword">string</span>|number</span>)<span class="comment">//是两种类型之一，但调用name方法时只能访问两种类型共有的方法，否则得加判断</span></span></div><div class="line">function <span class="title">padLeft</span>(<span class="params"><span class="keyword">value</span>: <span class="keyword">string</span>, padding: <span class="keyword">string</span> | number</span>) &#123;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">"number"</span>) &#123;</div><div class="line">       <span class="keyword">return</span> Array(padding + <span class="number">1</span>).<span class="keyword">join</span>(<span class="string">" "</span>) + <span class="keyword">value</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">"string"</span>) &#123;</div><div class="line">       <span class="keyword">return</span> padding + <span class="keyword">value</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> Error(`Expected <span class="keyword">string</span> or number, got <span class="string">'$&#123;padding&#125;'</span>.`);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>模块导入导出<br>  <strong><em>类和函数声明</em></strong>可以直接被默认导出，接口不能默认导出，但可以导出</li>
<li>声明合并，接口合并，命名空间合并</li>
</ul>
<h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><ul>
<li><p>重载方法不要写多多个每个参数不同这种写法，应该写一个，然后使用可选参数形式</p>
  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 错误 */</span></div><div class="line"><span class="keyword">interface</span> Example &#123;</div><div class="line">   diff(one: <span class="built_in">string</span>): <span class="built_in">number</span>;</div><div class="line">   diff(one: <span class="built_in">string</span>, two: <span class="built_in">string</span>): <span class="built_in">number</span>;</div><div class="line">   diff(one: <span class="built_in">string</span>, two: <span class="built_in">string</span>, three: <span class="built_in">boolean</span>): <span class="built_in">number</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* OK */</span></div><div class="line"><span class="keyword">interface</span> Example &#123;</div><div class="line">   diff(one: <span class="built_in">string</span>, two?: <span class="built_in">string</span>, three?: <span class="built_in">boolean</span>): <span class="built_in">number</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用联合类型</p>
<p>  不要为仅在某个位置上的参数类型不同的情况下定义重载：</p>
</li>
</ul>
<pre><code><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* WRONG */</span></div><div class="line"><span class="keyword">interface</span> Moment &#123;</div><div class="line">   utcOffset(): <span class="built_in">number</span>;</div><div class="line">   utcOffset(b: <span class="built_in">number</span>): Moment;</div><div class="line">   utcOffset(b: <span class="built_in">string</span>): Moment;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* OK */</span></div><div class="line"><span class="keyword">interface</span> Moment &#123;</div><div class="line">   utcOffset(): <span class="built_in">number</span>;</div><div class="line">   utcOffset(b: <span class="built_in">number</span>|<span class="built_in">string</span>): Moment;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let x:any&lt;/code&gt; &lt;code&gt;let x:object&lt;/code&gt;都可以赋值任意类型，不同在于， Object类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;never&lt;/code&gt; 表示那些永远不存在的值得类型
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://clownvary.github.io/tags/TypeScript/"/>
    
      <category term="学习" scheme="http://clownvary.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="注意事项" scheme="http://clownvary.github.io/tags/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>angular2新手上路</title>
    <link href="http://clownvary.github.io/2016/12/04/angular2%E6%96%B0%E6%89%8B%E4%B8%8A%E8%B7%AF/"/>
    <id>http://clownvary.github.io/2016/12/04/angular2新手上路/</id>
    <published>2016-12-03T16:52:49.000Z</published>
    <updated>2017-06-16T06:27:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li>tsconfig设置</li>
</ul>
<ul>
<li><p>tslint设置</p>
<p>  <code>tslint -i</code>生成默认配置文件</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;tsconfig设置&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;tslint设置&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;tslint
    
    </summary>
    
    
      <category term="学习" scheme="http://clownvary.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="angular2" scheme="http://clownvary.github.io/tags/angular2/"/>
    
      <category term="新手注意" scheme="http://clownvary.github.io/tags/%E6%96%B0%E6%89%8B%E6%B3%A8%E6%84%8F/"/>
    
  </entry>
  
  <entry>
    <title>vue易错笔记.md</title>
    <link href="http://clownvary.github.io/2016/11/18/vue%E6%98%93%E9%94%99%E7%AC%94%E8%AE%B0/"/>
    <id>http://clownvary.github.io/2016/11/18/vue易错笔记/</id>
    <published>2016-11-17T16:23:01.000Z</published>
    <updated>2017-06-16T06:27:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="几点要点"><a href="#几点要点" class="headerlink" title="几点要点"></a>几点要点</h3><ul>
<li><p>没有控制器的概念，所有的方法和逻辑应该写在方法中或者生命周期方法中</p>
</li>
<li><p>插值（mustache）不能在属性中使用，只能在模板中使用，属性中应该用<code>v-bind:title=&quot;xxx&quot;</code>这样，不能<code>title=</code></p>
</li>
<li><p>绑定都只能包含单个表达式，所以下面的例子都不会生效。</p>
</li>
</ul>
<a id="more"></a>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- 这是语句，不是表达式 --&gt;</span></span></div><div class="line"><span class="template-variable">&#123;&#123; var a = 1 &#125;</span><span class="xml">&#125;</span></div><div class="line"><span class="comment">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></div><div class="line"><span class="template-variable">&#123;&#123; <span class="keyword">if</span> (ok) &#123; return message &#125;</span><span class="xml"> &#125;&#125;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>v-bind:title 缩写:title,v-on:click= 缩写@click=</p>
</li>
<li><p>计算属性computed和watch,耗时长用watch,另外计算属性是依赖基础属性的如果基础属性没变化是不会调用的，如下</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  <span class="attr">now</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Date</span>.now()</div><div class="line">  &#125;</div><div class="line">&#125; <span class="comment">//此时now就不会更新，显然这时候使用method更好</span></div></pre></td></tr></table></figure>
<ul>
<li><p>组件中ｄａｔａ必须是方法而不能是对象，这样当有多个组件时，不会出现都引用同一个的问题</p>
</li>
<li><p>组件实例化要放在根实例化之前</p>
</li>
<li><p>v-model可以添加修饰值．lazy,number,trim</p>
</li>
<li><p>props,父组件给子ｐrops传值时，使用v-bind <code>&lt;my-cop ：my-prop=&#39;1&#39;&gt;&lt;/mycop&gt;</code> 而不是直接<code>&lt;my-cop my-prop=&#39;1&#39;&gt;&lt;/mycop&gt;</code> ，后者传递的只是一个字符１，不是数字</p>
</li>
<li><p>父组件事件监听和react差不多，需要注意的是如果要监听原生事件添加.native修饰符，如<code>&lt;my-component v-on:click.native=&quot;doTheThing&quot;&gt;&lt;/my-component&gt;</code></p>
</li>
<li><p>slot内容分发，类似angular 的transclusion,有匿名和具名两种，组合组件时常用</p>
</li>
<li><p>多个组件可以使用同一个挂载点，然后动态地在它们之间切换。使用 <strong><em> 保留的&lt; component&gt;元素 </em></strong>，动态地绑定到它的is特性：</p>
</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var <span class="keyword">vm</span> = <span class="keyword">new</span> Vue(&#123;</div><div class="line"><span class="keyword">e</span><span class="variable">l:</span> <span class="string">'#example'</span>,</div><div class="line">dat<span class="variable">a:</span> &#123;</div><div class="line">	currentVie<span class="variable">w:</span> <span class="string">'home'</span></div><div class="line">    &#125;,</div><div class="line">    component<span class="variable">s:</span> &#123;</div><div class="line">	home: &#123; /* ... */ &#125;,</div><div class="line">	post<span class="variable">s:</span> &#123; /* ... */ &#125;,</div><div class="line">	archive: &#123; /* ... */ &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)；</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;component v-bind:is=<span class="string">"currentView"</span>&gt;</div><div class="line">  <span class="xml"><span class="comment">&lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span> <span class="comment">//通过改变currentView的值来动态改变组件内容</span></div></pre></td></tr></table></figure>
<ul>
<li>ref引用，类似react　需要注意的是ref 被用来给元素或子组件注册引用信息。引用信息会根据父组件的 $refs 对象进行注册。如果在普通的DOM元素上使用，引用信息就是元素; 如果用在子组件上，引用信息就是组件实例:</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- vm.$refs.p will the DOM node --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">"p"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- vm.$refs.child will be the child comp instance --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">child-comp</span> <span class="attr">ref</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-comp</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>v-once 渲染结果缓存</li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">Vue</span>.component('terms-<span class="keyword">of</span>-service', &#123;</div><div class="line">	  <span class="keyword">template</span>: '\</div><div class="line">	    &lt;<span class="keyword">div</span> v-once&gt;\</div><div class="line">	      &lt;h1&gt;<span class="type">Terms</span> <span class="keyword">of</span> <span class="type">Service</span>&lt;/h1&gt;\</div><div class="line">	      ... a lot <span class="keyword">of</span> <span class="keyword">static</span> content ...\</div><div class="line">	    &lt;/<span class="keyword">div</span>&gt;\</div><div class="line">	  '</div><div class="line">	&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;几点要点&quot;&gt;&lt;a href=&quot;#几点要点&quot; class=&quot;headerlink&quot; title=&quot;几点要点&quot;&gt;&lt;/a&gt;几点要点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;没有控制器的概念，所有的方法和逻辑应该写在方法中或者生命周期方法中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插值（mustache）不能在属性中使用，只能在模板中使用，属性中应该用&lt;code&gt;v-bind:title=&amp;quot;xxx&amp;quot;&lt;/code&gt;这样，不能&lt;code&gt;title=&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;绑定都只能包含单个表达式，所以下面的例子都不会生效。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://clownvary.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端" scheme="http://clownvary.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html" scheme="http://clownvary.github.io/tags/html/"/>
    
      <category term="js" scheme="http://clownvary.github.io/tags/js/"/>
    
      <category term="css" scheme="http://clownvary.github.io/tags/css/"/>
    
      <category term="vue" scheme="http://clownvary.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>前端拾遗</title>
    <link href="http://clownvary.github.io/2016/07/22/%E5%89%8D%E7%AB%AF%E6%81%A2%E5%A4%8D%E4%B9%8B%E8%B7%AF/"/>
    <id>http://clownvary.github.io/2016/07/22/前端恢复之路/</id>
    <published>2016-07-22T08:14:52.000Z</published>
    <updated>2017-06-16T06:51:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这将是是一篇零散的学习笔记，用来记录自己重新复习、学习前端种种的知识点。希望我能真正的静下心来充实的度过这段时间。</p>
</blockquote>
<h2 id="整个笔记会分为以下三大部分"><a href="#整个笔记会分为以下三大部分" class="headerlink" title="整个笔记会分为以下三大部分"></a>整个笔记会分为以下三大部分</h2><ul>
<li><p><a href="#technology">技术理论部分</a></p>
</li>
<li><p><a href="#project">项目实践部分</a></p>
</li>
<li><p><a href="#interview">面试准备部分</a> </p>
</li>
</ul>
<a id="more"></a>
<h2 id="技术理论"><a href="#技术理论" class="headerlink" title="技术理论"></a><span id="technology">技术理论</span></h2><ul>
<li><a href="#html">html</a></li>
<li><a href="#css">css</a></li>
<li><a href="#less">less</a></li>
<li><a href="#js">js</a></li>
<li><a href="#es6">es6</a></li>
<li><a href="#jquery">jquery</a></li>
<li><a href="#git">git</a></li>
<li><a href="#angular">angular</a></li>
<li><a href="#node">node</a></li>
<li><a href="#mongo">mongo+sql</a></li>
<li><a href="#UnitTest">UnitTest</a></li>
<li><a href="#webpack">gulp+webpack+babel</a></li>
<li>[浏览器commonjs ]</li>
<li><a href="#react">react</a></li>
</ul>
<h3 id="css"><a href="#css" class="headerlink" title="css"></a><span id="css">css</span></h3><ul>
<li>box-shadow可以设置多个，这样可以显示层叠效果<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">box-shadow</span>: 0 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.3</span>),</div><div class="line">0 6<span class="selector-tag">px</span> 0 <span class="selector-tag">-3px</span> <span class="selector-tag">rgba</span>(255, 255, 255, 0<span class="selector-class">.8</span>),</div><div class="line">0 7<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-tag">-3px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.3</span>),</div><div class="line">0 43<span class="selector-tag">px</span> 0 <span class="selector-tag">-6px</span> <span class="selector-tag">rgba</span>(255, 255, 255, 0<span class="selector-class">.8</span>),</div><div class="line">0 44<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> <span class="selector-tag">-6px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.2</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>带有label的checkbox,如果label有for属性，当点击的有for属性的label标签时，对应的Checkbox复选框会被选中，这样就能利用label来修改checkbox样式，首先要隐藏原来的checkbox<a href="clownvary.github.io/demo/checkbox_demo/checkbox_css.html">看这个</a><br>同理其他的控件添加label 只要有for（for对应的是id），那么当点击这label时对应的控件便会获得焦点</li>
<li>background-size<br>cover 图小于父级块时放大图 填满块<br>contain 图大于父级块时，适当缩小，填满块</li>
<li><p>background-clip 背景色填充区域， content-box padding-box border-box</p>
</li>
<li><p>display:block;如果这样写的话，比如一个div内有多个span,本来是想都在一行显示的，但加了这的span就成了一个块，单独占满一行，其他的只能挤下去,这个时候可以设置inline-block就好了<br>*vertical-align: middle;,垂直居中，常用</p>
</li>
<li>css遮罩层<br>内嵌一个绝对定位的div,left top 均设置为0，即可覆盖<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"preview"</span>&gt;</div><div class="line">           &lt;<span class="selector-tag">img</span> src=<span class="string">"https://40.media.tumblr.com/a73e79ce9844761d7cdc93d202b5cea1/tumblr_nwh4iomduD1ud7rr3o1_1280.jpg"</span> alt=<span class="string">"proj1"</span> title=<span class="string">"proj"</span>&gt;</div><div class="line">           &lt;<span class="selector-tag">div</span> class=<span class="string">"modal-layout"</span>&gt;</div><div class="line">             &lt;<span class="selector-tag">div</span> class=<span class="string">"content"</span>&gt;</div><div class="line">               &lt;<span class="selector-tag">i</span> class=<span class="string">"fa fa-fire fa-fw fa-3x"</span>&gt;&lt;/i&gt;</div><div class="line">             &lt;/div&gt;</div><div class="line"></div><div class="line">           &lt;/div&gt;</div><div class="line">         &lt;/div&gt;</div><div class="line"></div><div class="line">         .modal-layout&#123;</div><div class="line">     <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">     <span class="attribute">height</span>: <span class="number">195px</span>;</div><div class="line">     <span class="attribute">background-color</span>: black;</div><div class="line">     <span class="attribute">opacity</span>: <span class="number">0.6</span>;</div><div class="line">     <span class="attribute">z-index</span>: <span class="number">2</span>;</div><div class="line">     <span class="attribute">position</span>: absolute;</div><div class="line">     <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">     <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="less"><a href="#less" class="headerlink" title="less"></a><span id="less">less</span></h3><ul>
<li><p>变量 mixin 混合 命名空间（注意只能是属性集不能访问变量，如<code>#base-style &gt; .button</code>不能有<code>#base-style &gt;@color</code>）</p>
</li>
<li><p>@import 导入，可以导入less,css，别和important弄混了</p>
</li>
<li><p>字符串插值，变量可以用像 @{name} 这样的结构，以类似 ruby 和 php 的方式嵌入到字符</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@base-url:</span> <span class="string">"http://assets.fnord.com"</span>;<span class="comment">//一般用在使用静态外部资源时候的配置，就不用js了</span></div><div class="line"><span class="attribute">background-image</span>: url(<span class="string">"@&#123;base-url&#125;/images/bg.png"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="js"><a href="#js" class="headerlink" title="js"></a><span id="js">js</span></h3><ul>
<li>函数返回函数的调用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name</span>)</span></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(name);</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">age</span>)</span></div><div class="line">  &#123;</div><div class="line">    <span class="built_in">console</span>.log(age);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用如下</span></div><div class="line">test(‘jary’)(<span class="number">34</span>);<span class="comment">//因为第一个方法返回还是个方法，所以直接跟参数</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="es6"><a href="#es6" class="headerlink" title="es6"></a><span id="es6">es6</span></h3><ul>
<li><p><a href="https://gist.github.com/clownvary/f5e5b77f4b376640f70d02fb4fba7b99" target="_blank" rel="external">对照这个看</a></p>
</li>
<li><p>let 应用for 循环 局部变量</p>
</li>
<li><p>数组、对象、字符解构，应用函数参数赋默认值</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function ajax(url,&#123;</div><div class="line">  <span class="attribute">aync</span>=<span class="literal">true</span>,</div><div class="line">  <span class="attribute">cache</span>=<span class="literal">true</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>string 几个方法 include startWith endWith padStart padEnd<br>1.模板字符串，<code>my name is ${name}</code> </p>
</li>
<li><p>Array 方法，for..of keys()、values()、entries(),from,of(将一组数转化为数组)find,findIndex,filter,fill(填充)</p>
</li>
<li><p>函数，拥有length属性，<strong><em>表示剩余的没有指定默认值的参数个数</em></strong>，注意不包括rest参数<br>1.rest参数<code>...iterms</code>,是一个后续的参数集合数组，注意rest只能是最后一个参数<br>2.扩展运算符<code>...iterms</code>好比rest的逆运算<br>3.箭头函数，注意如果直接返回一个对象应该用括号包住<br>4.函数默认参数，如果使用默认赋值则该参数不传即可，但不能传递null</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function f(x=<span class="number">1</span>,y=<span class="number">2</span>)&#123;return [x,y]&#125;</div><div class="line"><span class="function"><span class="title">f</span><span class="params">(<span class="number">2</span>,<span class="number">3</span>)</span></span><span class="comment">//[2,3]</span></div><div class="line"><span class="function"><span class="title">f</span><span class="params">(<span class="number">2</span>)</span></span><span class="comment">//[2,2]</span></div><div class="line"><span class="function"><span class="title">f</span><span class="params">(<span class="number">2</span>,null)</span></span><span class="comment">//[2,null]</span></div></pre></td></tr></table></figure>
</li>
<li><p>对象，<br>1.Object.is(),用来比较两个对象是否严格相等，与=== 意思相近，如<code>Object.is(+0,-0)//false</code></p>
</li>
<li><p>symbol,为了对象属性的唯一性，新加的js第七种类型，常用来作为标示<br>1.作为对象属相时必须用[]，括住，如</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> s_x=<span class="built_in">Symbol</span>(<span class="string">"book"</span>);</div><div class="line"><span class="keyword">let</span> me=&#123;[s_x]:<span class="string">"sword"</span>,<span class="attr">name</span>:<span class="string">"tom"</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(me[s_x]);<span class="comment">//me[s_x],和me.name访问形式不同</span></div></pre></td></tr></table></figure>
</li>
<li><p>set,不允许有重复的数组，weakset,数组内只能是对象<br>1.set 的for of xxx.keys() 的key和value完全一样</p>
</li>
<li><p>map,拥有键值对的集合，相比传统对象，它的键可以是对象，而不一定是字符串</p>
</li>
<li><p>尽量使用for of ,别用for in,for in 只能读取键名，不能读取值</p>
</li>
<li><p>generator 函数  用来暂停函数，可用在异步编程的同步操作中，通过next()来调用<br>1.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> *<span class="title">generator</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">"hello"</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="string">"world"</span>;</div><div class="line">  <span class="keyword">return</span> <span class="string">"ending"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>promise<br>promise的应用主要是可以把任意方法包装后 进行回调</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">class</span> me</div><div class="line">  &#123;</div><div class="line">   testPromise(todo)</div><div class="line">   &#123;</div><div class="line"> </div><div class="line">    <span class="keyword">let</span> p;</div><div class="line">    <span class="keyword">if</span>(todo===<span class="string">'xxx'</span>)</div><div class="line">    &#123;</div><div class="line">      p=<span class="built_in">Promise</span>.resolve(<span class="string">`成功<span class="subst">$&#123;todo&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123; </div><div class="line">    p=<span class="built_in">Promise</span>.reject(<span class="string">`失败<span class="subst">$&#123;todo&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> p;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> demo=<span class="keyword">new</span> me();</div><div class="line">demo.testPromise(<span class="string">'xsxx'</span>).then(<span class="function"><span class="params">x</span>=&gt;</span><span class="built_in">console</span>.log(x),<span class="function"><span class="params">x</span>=&gt;</span><span class="built_in">console</span>.log(x))</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="comment">// ... some code</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</div><div class="line">    resolve(value);<span class="comment">//带一个参数是可以把这个参数传给then回调方法</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    reject(error);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="comment">//then有两个参数，成功的和失败的，失败的参数是可选的，一般建议都不写，而是直接写catch捕获错误</span></div><div class="line">  ....</div><div class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">  ...</div><div class="line">&#125;).catch()</div></pre></td></tr></table></figure>
<p>1.一般来说，不要在then方法里面定义Reject状态的回调函数（即then的第二个参数），总是使用catch方法<br>2.promise.all()/race()方法</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">var</span> p = Promise.all([<span class="built_in">p1</span>,<span class="built_in">p2</span>,<span class="built_in">p3</span>])<span class="comment">;//三个promise对象全部resolve后p才resolve</span></div><div class="line"><span class="symbol">var</span> p = Promise.race([<span class="built_in">p1</span>,<span class="built_in">p2</span>,<span class="built_in">p3</span>])<span class="comment">;//三个中有一个率先resolve，p就resolve</span></div></pre></td></tr></table></figure>
<p>3.promise.resove(),将对象转换成promise对象<code>var jsPromise = Promise.resolve($.ajax(&#39;/whatever.json&#39;));</code><br>  Promise.reject(reason)方法也会返回一个新的Promise实例，该实例的状态为rejected。它的参数用法与Promise.resolve方法完全一致。</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.reject(<span class="string">'出错了'</span>);</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(<span class="string">'出错了'</span>))</div><div class="line"></div><div class="line">p.then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span> (<span class="params">s</span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(s)</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 出错了</span></div></pre></td></tr></table></figure>
<p>4.then.done()/finally(),一个用来结束promise()，一个用来表示不管什么状态最后都会执行的操作</p>
</li>
<li><p>class<br>1.constructor()构造函数<br>2.类内部的方法直接写就行，不用加function 关键字<br>3.私有方法，es6不提供，可以以下实现</p>
  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</div><div class="line"></div><div class="line"> <span class="comment">// 公有方法</span></div><div class="line"> foo (baz) &#123;</div><div class="line"><span class="keyword">this</span>._bar(baz);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">// 私有方法</span></div><div class="line"> _bar(baz) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.snaf = baz;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="comment">// ...</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</div><div class="line"> foo (baz) &#123;</div><div class="line">bar.call(<span class="keyword">this</span>, baz);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">(baz)</span> </span>&#123;</div><div class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.snaf = baz;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</code></pre><p>  3.继承，extends<br>   <figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></div><div class="line">&#123;</div><div class="line">  constructor(name,age)</div><div class="line">  &#123;</div><div class="line">  <span class="keyword">super</span>(name);<span class="comment">//必须调用父类构造方法，不然得不到this对象</span></div><div class="line">  <span class="keyword">this</span>.age=age;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  4.get set ，来对属性的读取进行拦截<br>  5.静态方法，直接加static关键字</p>
<ul>
<li><p>Decorator，只能加在类、类的方法上，不能加在函数上,es7的提案，es2015的话不支持</p>
</li>
<li><p>module<br>1.export,可以使用as 重命名输出的接口名</p>
  <figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> exports&#123;</div><div class="line">  v <span class="keyword">as</span> exp_v<span class="comment">//输出就是exp_v</span></div><div class="line"> &#125;</div><div class="line">注意输出必须是接口</div><div class="line"> <span class="comment">// 报错</span></div><div class="line"> <span class="keyword">export</span> <span class="number">1</span>;</div><div class="line"></div><div class="line"> <span class="comment">// 报错</span></div><div class="line">  <span class="keyword">var</span> m = <span class="number">1</span>;</div><div class="line"> <span class="keyword">export</span> m;</div><div class="line"> 应该是</div><div class="line"> <span class="comment">// 写法一</span></div><div class="line"> <span class="keyword">export</span> <span class="keyword">var</span> m = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">// 写法二</span></div><div class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</div><div class="line"><span class="keyword">export</span> &#123;m&#125;;</div><div class="line"> </div><div class="line"><span class="comment">// 写法三</span></div><div class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</div><div class="line"><span class="keyword">export</span> &#123;n <span class="keyword">as</span> m&#125;;</div></pre></td></tr></table></figure>
<p>2.import</p>
<ul>
<li>模块加载一,指定变量加载</li>
</ul>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//profile</span></div><div class="line"><span class="keyword">export</span>&#123;lastname&#125;</div><div class="line"><span class="comment">//file</span></div><div class="line"> <span class="keyword">import</span> &#123; lastName  &#125; <span class="keyword">from</span> <span class="string">'./profile'</span>;<span class="comment">//导入名称必须和导出一样</span></div><div class="line"> <span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">'./profile'</span>;也可以指定另外的导出名称</div></pre></td></tr></table></figure>
<ul>
<li><p>模块加载二，整体加载</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// circle.js</span></div><div class="line"></div><div class="line"> <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">radius</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.PI * radius * radius;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">circumference</span>(<span class="params">radius</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * radius;</div><div class="line"> &#125;</div><div class="line"> <span class="comment">// main.js</span></div><div class="line"></div><div class="line"> <span class="keyword">import</span> &#123; area, circumference &#125; <span class="keyword">from</span> <span class="string">'./circle'</span>;</div><div class="line"></div><div class="line"> <span class="built_in">console</span>.log(<span class="string">'圆面积：'</span> + area(<span class="number">4</span>));</div><div class="line"> <span class="built_in">console</span>.log(<span class="string">'圆周长：'</span> + circumference(<span class="number">14</span>));</div><div class="line"> <span class="comment">//简单写法</span></div><div class="line"> <span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">'./circle'</span>;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'圆面积：'</span> + circle.area(<span class="number">4</span>));</div><div class="line"> <span class="built_in">console</span>.log(<span class="string">'圆周长：'</span> + circle.circumference(<span class="number">14</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>模块加载三，默认加载<br>前两种都需要知道输出的接口名字，这种不需要</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// export-default.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//default只能使用一次</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// import-default.js</span></div><div class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'./export-default'</span>;<span class="comment">//可以取任意名字</span></div><div class="line">customName(); <span class="comment">// 'foo'</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a><span id="jquery">jquery</span></h3><ul>
<li><p>$(html,[ownerdoc]) </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"&lt;div&gt;"</span>, &#123;</div><div class="line"> <span class="string">"class"</span>: <span class="string">"test"</span>,</div><div class="line"> <span class="attr">text</span>: <span class="string">"Click me!"</span>,</div><div class="line"> <span class="attr">click</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="keyword">this</span>).toggleClass(<span class="string">"test"</span>);</div><div class="line">&#125;</div><div class="line">&#125;).appendTo(<span class="string">"body"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>$.holdReady(true[false])</p>
</li>
<li><p>$.date(key,value)</p>
</li>
<li><p>$.queue() 执行队列函数</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).queue(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      $(<span class="keyword">this</span>).removeClass(<span class="string">"newcolor"</span>);</div><div class="line">      $(<span class="keyword">this</span>).dequeue();</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><code>$</code>.fn.extend() 扩展元素集方法，$ .extend()扩展jquery对象本身</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">   jQuery.fn.extend(&#123;</div><div class="line">   <span class="attr">check</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.checked = <span class="literal">true</span>; &#125;);</div><div class="line">   &#125;,</div><div class="line">   <span class="attr">uncheck</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.checked = <span class="literal">false</span>; &#125;);</div><div class="line">    &#125;</div><div class="line">   &#125;);</div><div class="line">   $(<span class="string">"input[type=checkbox]"</span>).check();</div><div class="line">   $(<span class="string">"input[type=radio]"</span>).uncheck();</div><div class="line">    ====</div><div class="line">   $.extend(&#123;</div><div class="line">   <span class="attr">min</span>:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">     &#123; <span class="keyword">return</span> a &lt; b ? a : b; &#125;</div><div class="line">   &#125;</div><div class="line">   &#125;);</div><div class="line">$.min(<span class="number">2</span>,<span class="number">3</span>);</div></pre></td></tr></table></figure>
<ul>
<li><p>:even :odd 选择偶数单数<br><code>$(&quot;li:even&quot;)</code></p>
</li>
<li><p>:gt :lt 匹配索引值大于或小于给定值得元素<br><code>$(&quot;tr:gt(0)&quot;)</code></p>
</li>
</ul>
<h3 id="angular"><a href="#angular" class="headerlink" title="angular"></a><span id="angular">angular</span></h3><ul>
<li><p>指令中的link，controller等的依赖参数为<code>$element,$attrs</code>,别写错了，注意$符号，开发时可以不用写依赖，</p>
<p>后续使用插件即可</p>
</li>
<li><p>controller as 就是个语法塘，省去了注入$scope,变成了一个js对象</p>
</li>
<li><p>mg-model 可以实现双向绑定，和<code></code>，ng-bind不同，后者是单向的</p>
</li>
<li><p>注意$scope.$watch的时候有个坑，监控的对象只能是表达式</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">scope.name=<span class="string">'sds'</span>;</span></div><div class="line"><span class="meta">$</span><span class="bash">scope.<span class="variable">$watch</span>(<span class="string">'name'</span>,xxx)//必须带引号</span></div><div class="line">不能是</div><div class="line"><span class="meta">$</span><span class="bash">scope.<span class="variable">$watch</span>(name,xxx)</span></div></pre></td></tr></table></figure>
<ul>
<li><p>创建select用ng-option</p>
</li>
<li><p>注意用绝对地址‘html/xxx’不要相对的，’./html/xxx’；</p>
</li>
</ul>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-model</span>=<span class="string">"selectedSite"</span> <span class="attr">ng-options</span>=<span class="string">"x.site for x in sites"</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">//遍历的是对象，用site作为option的值</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你选择的是<span class="template-variable">&#123;&#123;selectedSite.site&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>网址为<span class="template-variable">&#123;&#123;selectedSite.url&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div></pre></td></tr></table></figure>
<ul>
<li><p>nginclude 需要单引号<code>&lt;div ng-include=&quot;&#39;./html/user_list.html&#39;&quot;&gt;&lt;/div&gt;</code></p>
</li>
<li><p>动画</p>
<p>1.引入动画库<br>2.主模块依赖<br>3.内置的如 ng-if ng-repeat之类的指令动画用class,非内置的用ngClass，这种可以跟表达式，因为该指令本身也是内置动画指令的一种，所以会自动添加…add,add-active,之类的class,如果只是用class的话那不会添加，所以要用ngClass</p>
</li>
<li><p>指令</p>
<ol>
<li>\’=’双向绑定不可以使用<code></code>,<br>这是一个双向数据绑定前缀标识符<br>使用方法：在元素中使用属性，好比这样<div my-directive="" age="age"></div>,注意，数据的双向绑定要通过=前缀标识符实现，所以不可以使用<code></code>。,等号后面的age是父级的scope里的</li>
</ol>
</li>
</ul>
<h3 id="node"><a href="#node" class="headerlink" title="node"></a><span id="node">node</span></h3><ul>
<li><p>后端不要用webpack,webpack只为前端设计</p>
</li>
<li><p>commonjs 规范中expots 和module.exports 区别如下</p>
</li>
</ul>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">exports</span>.str = <span class="string">'a'</span>;  </div><div class="line">module.<span class="keyword">exports</span> = <span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span> <span class="comment">&#123;&#125;</span>;</span>  </div><div class="line"><span class="comment">//要导出的属性直接挂在exports上，要到处的对象或方法挂在module.exports下，或者全部挂在module.exports下</span></div></pre></td></tr></table></figure>
<ul>
<li><p>process 对象，有关进程的一切</p>
</li>
<li><p>将静态资源即图片css之类的所在路径传给express，之后就能在路径里访问了</p>
</li>
<li><p><strong><em>中间件</em></strong>必须调用next()方法，转交控制权，其他的没有next参数，</p>
</li>
</ul>
<h3 id="webpack-gulp-webpack-babel"><a href="#webpack-gulp-webpack-babel" class="headerlink" title="webpack+gulp+webpack+babel"></a><span id="webpack">webpack+gulp+webpack+babel</span></h3><ul>
<li><p>webpack 只是打包以及一些模块相关的工作，gulp是整个工作流涵盖比较广，可以理解为webpack也是gulp的一个task</p>
</li>
<li><p>注意gulp的依赖和顺序执行</p>
</li>
<li><p>gulp的src路径匹配有一点需要注意，比如要匹配src下的A目录的所以文件不能写<code>src/*</code>,这样不行，得加上目录<code>src/**/*.js</code>,才行，两个星号是目录，一个是文件</p>
</li>
<li><p>webpack loader串联！ 注意<em>执行顺序是从右到左</em>，比如<code>style!css!less</code>,就是先less编译再到css再到style</p>
</li>
<li><p>安装webpack后，在js 文件中直接使用commonJs写法 之后打包即可运行，webpack打包过程中会增加支持，，不用使用browsify</p>
</li>
<li><p>es6写法的话，看这个例子<a href="https://segmentfault.com/a/1190000004457636" target="_blank" rel="external">es6</a>,注意如果是babel 6以上需要安装<code>babel-preset-es2015</code></p>
</li>
</ul>
<ul>
<li><p>es6在webstorm中调试，<br>1.console<br>2.在bundle 即编译过得文件中找到定位，打断点，编译后改变不大，注意不要压缩</p>
</li>
<li><p>一般commonchunk常配合多入口打包，才能提取公共部分，<a href="https://github.com/webpack/webpack/tree/master/examples/multiple-entry-points" target="_blank" rel="external">看这个</a></p>
</li>
<li><p>引入第三方库，不用打包，在页面直接引入，在配置文件中设置externals选项</p>
</li>
<li><p>webpack(默认配置文件名webpack.config.js) 别忘了 -p 压缩 常用 <code>webpack -p -w</code> </p>
</li>
<li><p>图片以及静态资源的打包配置如下</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">test: </span>/\.(jpg|png|jpeg)$/, loader: "url?limit=61920&amp;name=./images/[hash:8].[ext]"</div><div class="line">小于60k会被编译成base64，其他会被放到*指定的输出目录下的imgaes目录下，哈希命名，样式中的路径名字会自动替换</div><div class="line">注意webpack中的publicPath,用来配置静态资源前缀，一般用于cdn或其他，并不生成目录，只有loader生成目录</div></pre></td></tr></table></figure>
</li>
<li><p>配置项<code>devtool:&#39;source-map&#39;</code>可以使用sourcemap调试</p>
</li>
<li><p>注意当开启css-loader的module模式后，如果样式表里有引用图片资源，路径要往上多写一级，不然会出错，比如原来是<code>./png/xx.png</code>应该写成<code>../img/png/xx.png</code>这是个<a href="http://stackoverflow.com/questions/34480228/how-to-load-svg-images-in-webpack" target="_blank" rel="external">bug</a></p>
</li>
<li><p><strong><em>前端工程的流程可以是这样</em></strong>:<br>1.使用webpack把该打包的打包，该生成的文件生产，不要压缩，不要合并尽量都是独立js或css<br>2.使用gulp对生成的文件再进行相关处理，js（合并）压缩，css 雪碧图 css压缩，文件MD5 和替换</p>
</li>
</ul>
<h3 id="react"><a href="#react" class="headerlink" title="react"></a><span id="react">react</span></h3><ul>
<li><p>组件开头名称必须大写刚好和angular指令相反</p>
</li>
<li><p>组件中class 和for属性要写成className htmlFor,因为前者都是保留字段,注意指的是在组件定义中的时候不是ReactDom使用的时候<br>如果要添加自定义属性，需要加data-前缀,获取时用<code>this.refs.test.getAttribute(&#39;data-attr&#39;)</code>获取</p>
</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Hello=React.createClass(&#123;</div><div class="line">       render :function () &#123;</div><div class="line">       <span class="comment">//这里要用className才能得到相应的样式</span></div><div class="line">           <span class="keyword">return</span> &lt;div className=<span class="string">'ddd'</span> ref=<span class="string">'test'</span> <span class="keyword">data</span>-attr=<span class="string">'dddd'</span>&gt;&#123;<span class="keyword">this</span>.props.<span class="keyword">class</span>&#125;&lt;/div&gt;;</div><div class="line">       &#125;</div><div class="line">   &#125;);</div><div class="line">   ReactDOM.render(</div><div class="line">   &lt;Hello name=<span class="string">"John"</span> <span class="class"><span class="keyword">class</span>='<span class="title">ddd</span>' /&gt;,</span></div><div class="line">           <span class="type">document.getElementById</span>(<span class="string">'example'</span>)</div><div class="line">   );</div></pre></td></tr></table></figure>
<ul>
<li><p>组件中只能有一个顶层标签</p>
</li>
<li><p>获取真实dom节点用ref属性</p>
</li>
<li><p>React.props.children表示引用组件的所有子节点，一般用React.Children(大写)<br>来遍历，而不用担心子节点的类型</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">React.Children.map(<span class="keyword">this</span>.props.children, <span class="function"><span class="keyword">function</span> (<span class="params">child</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</div><div class="line">      &#125;)</div></pre></td></tr></table></figure>
<ul>
<li><p>props state,区分就是前者一旦定义就不再轻易改变，后者是可变的，另外props一半用来外部传参</p>
</li>
<li><p>组件内联样式格式<code>style={</code>{opacity: this.state.opacity}<code>}</code> 不能写成别的，双括号</p>
</li>
</ul>
<h2 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a><span id="project">项目实践</span></h2><ul>
<li><a href="#xxx">xxx</a></li>
</ul>
<h2 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a><span id="interview">面试准备</span></h2><ul>
<li><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/blob/master/Translations/Chinese/README.md#html-相关问题" target="_blank" rel="external">前端面试问题</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这将是是一篇零散的学习笔记，用来记录自己重新复习、学习前端种种的知识点。希望我能真正的静下心来充实的度过这段时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;整个笔记会分为以下三大部分&quot;&gt;&lt;a href=&quot;#整个笔记会分为以下三大部分&quot; class=&quot;headerlink&quot; title=&quot;整个笔记会分为以下三大部分&quot;&gt;&lt;/a&gt;整个笔记会分为以下三大部分&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#technology&quot;&gt;技术理论部分&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#project&quot;&gt;项目实践部分&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#interview&quot;&gt;面试准备部分&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://clownvary.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端" scheme="http://clownvary.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html" scheme="http://clownvary.github.io/tags/html/"/>
    
      <category term="js" scheme="http://clownvary.github.io/tags/js/"/>
    
      <category term="css" scheme="http://clownvary.github.io/tags/css/"/>
    
      <category term="angular" scheme="http://clownvary.github.io/tags/angular/"/>
    
      <category term="react" scheme="http://clownvary.github.io/tags/react/"/>
    
  </entry>
  
</feed>
